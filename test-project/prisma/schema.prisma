datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  password  String?
  image     String?
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  accounts  Account[]
  organizations OrganizationMember[]
  ownedOrganizations Organization[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  logo        String?
  isPublic    Boolean  @default(false)
  industry    String?
  size        String?  // "1-10", "11-50", "51-200", "201-500", "500+"
  founded     String?
  location    String?
  email       String?
  twitter     String?
  linkedin    String?
  github      String?
  
  // SEO & Discovery
  tags        String?  // Comma-separated tags for discovery
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  
  // Stats
  viewCount   Int      @default(0)
  
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     OrganizationMember[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String       @default("member") // "owner", "admin", "member"
  title          String?      // Job title
  department     String?
  
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([userId, organizationId])
}