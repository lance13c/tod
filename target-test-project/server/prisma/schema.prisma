// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  phone         String?
  isAdmin       Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  documents     Document[]
  participants  Participant[]
  accounts      Account[]
  // Better Auth related
  authSessions  AuthSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

// Better Auth Session model
model AuthSession {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Better Auth Verification model (for magic links, email verification, etc.)
model Verification {
  id         String   @id @default(cuid())
  identifier String   // email address or other identifier
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("verification")
}

// Application Session model (for document sharing sessions)
model Session {
  id              String   @id @default(cuid())
  code            String   @unique // 6-character code
  name            String
  description     String?
  creatorId       String
  latitude        Float
  longitude       Float
  radius          Int      @default(100) // meters
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  
  creator         User     @relation(fields: [creatorId], references: [id])
  documents       Document[]
  participants    Participant[]
  
  @@map("app_sessions")
}

model Document {
  id          String   @id @default(cuid())
  filename    String
  mimetype    String
  size        Int
  path        String   // filesystem path
  uploaderId  String
  sessionId   String
  createdAt   DateTime @default(now())
  
  uploader    User     @relation(fields: [uploaderId], references: [id])
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Participant {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  joinedAt  DateTime @default(now())
  latitude  Float?
  longitude Float?
  
  user      User     @relation(fields: [userId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, sessionId])
}